{"version":3,"sources":["store/loading.ts","store/postReducer.ts","store/commentPostReducer.ts","helpers/api.ts","store/index.ts","components/Start.tsx","components/Filters/Filters.tsx","components/PostList/PostList.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","components/ErrorPostLoad/ErrorPostLoad.tsx","App.tsx","index.tsx"],"names":["reducer","loading","action","type","setPosts","posts","payload","setPostID","postId","setErrorStatus","error","setErrorText","initialState","isErrorPost","errorText","userId","state","setComments","comments","setErrorTextOnDetails","post","commentId","errorPostDetails","BASE_URL","request","url","options","fetch","then","response","ok","Error","status","json","result","data","remove","method","getUserPosts","getPostDetails","getPostComments","rootReducer","combineReducers","loadingReducer","postLoadingReducer","postDetails","commentPostReducer","getServerPosts","getCommentsList","getPostsDetails","getPostId","getCommentId","isLoading","getErrorText","isErrorTextPostDetails","loadPosts","dispatch","a","message","store","createStore","composeWithDevTools","applyMiddleware","thunk","Start","useDispatch","useSelector","history","useHistory","location","useLocation","searchParams","URLSearchParams","search","className","onClick","delete","push","toString","disabled","Filters","useState","query","setQuery","selectedUserId","get","applyQuery","useCallback","debounce","newQuery","set","selectUserPosts","user","Number","name","value","placeholder","onChange","e","target","event","PostsList","appliedQuery","fetchPostsbyUser","loadPostsbyUser","fetchPostDetails","id","Promise","all","console","log","loadPostDetails","useEffect","visiblePosts","useMemo","titleFromQuery","toLowerCase","filter","title","includes","removePost","filteredPosts","length","map","key","NewCommentForm","body","email","commentFields","setCommentFields","setForm","prevState","onSubmit","preventDefault","params","newComment","Date","headers","JSON","stringify","required","PostDetails","isCommentsVisible","setIsCommentsVisible","reLoadpostDetails","current","comment","setCommentID","ErrorOnLoad","App","isLoadErrorPost","isLoadErrorPostDetails","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4a2a5f84.chunk.js","sourcesContent":["import { AnyAction } from 'redux';\n\n// Action types\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\n// Action creators\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\nconst reducer = (loading = false, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n\n    case FINISH_LOADING:\n      return false;\n\n    default:\n      return loading;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\nimport  { POST } from '../type';\n\n// Action types\nconst SET_POSTS = 'SET_POSTS';\nconst SET_POST_ERROR_STATE = 'SET_POST_ERROR_STATE';\nconst SET_POST_ERROR_TEXT = 'SET_POST_ERROR_TEXT';\nconst SET_POST_ID = 'SET_POST_ID';\n\n// Action creators\nexport const setPosts = (posts: POST[]) => ({ type: SET_POSTS, payload: posts });\nexport const setPostID = (postId: number) => ({ type: SET_POST_ID, payload: postId });\nexport const setErrorStatus = (error: boolean) => ({ type: SET_POST_ERROR_STATE, error });\nexport const setErrorText = (error: string) => ({ type: SET_POST_ERROR_TEXT, error });\n\n// message reducer receives only the `state.message` part, but not the entire Redux state\nexport type PostState = {\n  posts: POST[]|[];\n  isErrorPost: boolean,\n  errorText: string,\n  postId: number;\n  userId: number;\n};\n\nconst initialState: PostState = {\n  posts: [],\n  isErrorPost: true,\n  errorText: '',\n  postId: 0,\n  userId: 0,\n}\n\nconst reducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return { \n        ...state,\n        posts: action.payload\n      };\n\n    case SET_POST_ERROR_STATE:\n      return {\n        ...state,\n        isErrorPost: action.error,\n      };\n\n    case SET_POST_ERROR_TEXT:\n      return {\n        ...state,\n        errorText: action.error,\n      };\n    \n    case SET_POST_ID:\n      return {\n        ...state,\n        postId: action.payload,\n      };\n  \n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\nimport  { COMMENT, POST } from '../type';\n\n// Action types\nconst SET_POSTS_DETAILS = 'SET_POSTS_DETAILS';\nconst SET_COMMENTS = 'SET_COMMENTS';\nconst SET_COMMENT_ID = 'SET_COMMENT_ID';\nconst SET_POST_DETAILS_ERROR_TEXT = 'SET_POST_DETAILS_ERROR_TEXT'\n\n// Action creators\nexport const setPostDetails = (post: POST) => ({ type: SET_POSTS_DETAILS, payload: post });\nexport const setComments = (comments: COMMENT[]) => ({ type: SET_COMMENTS, payload: comments });\nexport const setCommentID = (commentId: number) => ({ type: SET_COMMENT_ID, payload: commentId });\nexport const setErrorTextOnDetails = (error: boolean) => ({ type: SET_POST_DETAILS_ERROR_TEXT, error: error });\n\n// message reducer receives only the `state.message` part, but not the entire Redux state\nexport type PostDetailsState = {\n  post: POST | {};\n  comments: COMMENT [] | [],\n  commentId: number,\n  errorPostDetails: boolean;\n};\n\nconst initialState: PostDetailsState = {\n  post: {},\n  comments: [],\n  commentId: 0,\n  errorPostDetails: true,\n}\n\nconst reducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_POSTS_DETAILS:\n      return { \n        ...state,\n        post: action.payload\n      };\n\n    case SET_COMMENTS:\n      return {\n        ...state,\n        comments: action.payload,\n      };\n\n    case SET_COMMENT_ID:\n      return {\n        ...state,\n        commentId: action.payload,\n      };\n\n    case SET_POST_DETAILS_ERROR_TEXT:\n      return {\n        ...state,\n        errorPostDetails: action.error,\n      }\n  \n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { OPTIONS, NEWCOMMENT } from '../type';\nexport const BASE_URL = 'https://mate-api.herokuapp.com';\n\nconst request = (url: string, options:OPTIONS) => fetch(`${BASE_URL}${url}`, options)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status}`);\n    }\n\n    return response.json();\n  })\n  .then(result => {\n    return result.data\n  });\n  \nconst remove = (url: string) => request(url, { method: 'DELETE' });\n\nexport const getUserPosts = (userId: number) => request(`/posts?userId=${userId}`, { method: 'GET' });\nexport const getPosts = () => request('/posts', { method: 'GET' } );\nexport const getPostDetails = (postId: number) => request(`/posts/${postId}`, { method: 'GET' } );\nexport const getPostComments = (postId: number) => request(`/comments?postId=${postId}`, { method: 'GET' });\n\nexport const deletePost = (postID: number) => remove(`/posts/${postID}`);\nexport const deletComment = (commentID: number) => remove(`/comments/${commentID}`);\nexport const createComment = (params: NEWCOMMENT) => fetch(`${BASE_URL}/comments`, {\n  method: 'POST',\n  headers: {\n    'Content-type': 'application/json; charset=utf-8',\n  },\n  body: JSON.stringify({\n    postId: params.postId,\n    name: params.name,\n    email: params.email,\n    body: params.body,\n  }),\n})\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status}- Error`);\n    }\n\n    return response.json();\n  });\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Dispatch } from 'react';\n\nimport loadingReducer, { finishLoading, startLoading } from './loading';\nimport postLoadingReducer, { setPosts, setErrorStatus, setErrorText } from './postReducer';\nimport commentPostReducer, { setPostDetails, setComments, setErrorTextOnDetails } from './commentPostReducer';\n\nimport { getPosts, getUserPosts, getPostComments, getPostDetails, deletComment } from '../helpers/api';\nimport { POST } from '../type';\n\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  posts: postLoadingReducer,\n  postDetails: commentPostReducer,\n});\n\n// We automatically get types returned by concrete reducers\nexport type RootState = ReturnType<typeof rootReducer>;\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const getServerPosts = (state: RootState ) => state.posts.posts;\nexport const getCommentsList = (state: RootState ) => state.postDetails.comments;\nexport const getPostsDetails = (state: RootState ) => state.postDetails.post;\nexport const getPostId = (state: RootState ) => state.posts.postId;\nexport const getCommentId = (state: RootState ) => state.postDetails.commentId;\nexport const isLoading = (state: RootState) => state.loading;\nexport const isErrorPost = (state: RootState) => state.posts.isErrorPost;\nexport const getErrorText = (state: RootState) => state.posts.errorText;\nexport const isErrorTextPostDetails = (state: RootState ) => state.postDetails.errorPostDetails;\n\nexport const loadPosts = () => {\n  // inner function is an action handled by Redux Thunk\n  return async (dispatch: Dispatch<any>) => {\n    dispatch(startLoading());\n\n    try {\n      const posts: POST[] = await getPosts();\n      dispatch(setErrorStatus(false));\n      dispatch(setPosts(posts));\n    } catch (error) {\n      dispatch(setErrorStatus(true));\n      dispatch(setErrorText(error.message));     \n    }\n\n    dispatch(finishLoading());\n  };\n};\n\nexport const loadPostsbyUser = (userId: number) => {\n  return async (dispatch: Dispatch<any>) => {\n    try {\n      const posts: POST[] = await getUserPosts(userId);\n      dispatch(setErrorStatus(false));\n      dispatch(setPosts(posts));\n    } catch (error) {\n      dispatch(setErrorStatus(true));\n      dispatch(setErrorText(error.message));     \n    }\n\n    dispatch(finishLoading());\n  };\n};\n\nexport const loadPostDetails = (postId: number) => {\n  return async (dispatch: Dispatch<any>) => {\n    try {\n      Promise.all([getPostComments(postId), getPostDetails(postId)])\n      .then((result) => {\n\n        dispatch(setErrorTextOnDetails(false));   \n        dispatch(setPostDetails(result[1]));\n        dispatch(setComments(result[0]));\n      })\n    } catch (error) {\n      console.log(error.message);\n      dispatch(setErrorTextOnDetails(true));    \n    }\n  };\n}\n\nexport const reLoadpostDetails = (commentId: number, postId: number ) => {\n  return async (dispatch: Dispatch<any>) => {\n    try {\n      await deletComment(commentId);\n      const comments = await getPostComments(postId);\n      dispatch(setComments(comments));\n    } catch (error) {\n      console.log(error.message)\n    }\n  }\n}\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useLocation, useHistory } from 'react-router-dom';\n\nimport { isLoading, loadPosts } from '../store';\n\nexport const Start = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(isLoading);\n  const history = useHistory();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n\n  return (\n    <button\n      type=\"button\"\n      className=\"button button__start\"\n      onClick={() => {\n        searchParams.delete('query');\n        searchParams.delete('selectedId');\n        history.push({ search: searchParams.toString() });\n        dispatch(loadPosts())\n      }}\n      disabled={loading}\n    >\n      {loading ? 'Loading...' : 'Load'}\n    </button>\n  );\n};\n","import React, { useCallback, useState } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\n\nimport { setPostID } from '../../store/postReducer';\n\nimport debounce from 'lodash/debounce';\n\nexport const Filters = () => {\n  const dispatch = useDispatch();\n  const [query, setQuery] = useState('');\n  const location = useLocation();\n  const history = useHistory();\n  const searchParams = new URLSearchParams(location.search);\n  const selectedUserId = searchParams.get('selectedId') || '';\n\n  const applyQuery = useCallback(\n    debounce((newQuery: string | null) => {\n      if (newQuery) {\n        searchParams.set('query', newQuery);\n      } else {\n        searchParams.delete('query');\n      }\n\n      history.push({ search: searchParams.toString() });\n    }, 500), [],\n  );\n\n  const selectUserPosts = useCallback((user) => {\n    if (Number(user)) {\n      searchParams.set('selectedId', user);\n      dispatch(setPostID(0));\n    } else {\n      searchParams.delete('selectedId');\n    }\n\n    history.push({ search: searchParams.toString() });\n  }, [selectedUserId]);\n\n  return (\n    <header className=\"App__header\">\n      <label>\n        Title: &nbsp;\n        <input\n          type=\"text\"\n          name=\"title\"\n          value={query}\n          placeholder=\"Search by title\"\n          className=\"App__user-input\"\n          onChange={(e) => {\n            const { value } = e.target;\n            setQuery(value);\n            applyQuery(value);\n          }}\n        />\n      </label>\n      <label>\n        Select a user: &nbsp;\n        <select\n          className=\"App__user-selector\"\n          value={selectedUserId}\n          onChange={(event) => {\n            const { value } = event.target;\n            selectUserPosts(value);\n          }}\n        >\n          <option value=\"0\">All users</option>\n          <option value=\"1\">Leanne Graham</option>\n          <option value=\"2\">Ervin Howell</option>\n          <option value=\"3\">Clementine Bauch</option>\n          <option value=\"4\">Patricia Lebsack</option>\n          <option value=\"5\">Chelsey Dietrich</option>\n          <option value=\"6\">Mrs. Dennis Schulist</option>\n          <option value=\"7\">Kurtis Weissnat</option>\n          <option value=\"8\">Nicholas Runolfsdottir V</option>\n          <option value=\"9\">Glenna Reichert</option>\n          <option value=\"10\">Leanne Graham</option>\n        </select>\n      </label>\n  </header>\n  );\n};\n","import React, { useMemo, useCallback, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\n\nimport './PostList.scss';\n\nimport { getServerPosts, getPostId, loadPostsbyUser, loadPosts, loadPostDetails } from '../../store';\nimport { setPostID, setPosts } from '../../store/postReducer';\n\nimport { deletePost } from '../../helpers/api';\nimport { POST } from '../../type';\n\nexport const PostsList = () => {\n  const dispatch = useDispatch();\n  const posts: POST[] = useSelector(getServerPosts);\n  const postId = useSelector(getPostId);\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const appliedQuery = searchParams.get('query') || '';\n  const selectedUserId = searchParams.get('selectedId') || '';\n\n\n  const fetchPostsbyUser = (userId: number) => {\n    return dispatch(loadPostsbyUser(userId));\n  };\n\n  const fetchPostDetails = (id: number) => {\n    return dispatch(loadPostDetails(id));\n  }\n\n  useEffect(() => {\n    const userId = Number(selectedUserId);\n    if (userId !== 0){\n      fetchPostsbyUser(userId);\n    } else {\n      dispatch(loadPosts())\n    }\n  }, [selectedUserId]);\n\n  useEffect(() => {\n    if (postId !== 0) {\n        fetchPostDetails(postId);\n    }\n  }, [postId]);\n\n\n  const visiblePosts = useMemo(() => {\n    if (!appliedQuery) {\n      return posts;\n    }\n\n    const titleFromQuery = appliedQuery.toLowerCase();\n\n    return posts.filter(({ title }) => ` ${title || ''}`.toLowerCase().includes(titleFromQuery));\n  }, [posts, appliedQuery]);\n\n  const removePost = useCallback((id: number) => {\n    const filteredPosts = visiblePosts.filter(post => post.id !== id);\n    dispatch(setPosts(filteredPosts));\n    deletePost(id);\n  },[posts]);\n\n\n  return(\n   <div className=\"PostsList\">\n     <ul className=\"PostsList__list\">\n      {visiblePosts.length !== 0\n        ? visiblePosts.map(post => (\n          <li\n            key={post.id}\n            className=\"PostsList__item\"\n          >\n            <div>\n              <b>`[User # {post.userId}]: `</b>{post.title}\n            </div>\n\n            <div className=\"PostsList__container\">\n              {postId === post.id \n                ? (\n                  <button\n                    type=\"button\"\n                    className=\"PostsList__button button\"\n                    onClick={() => dispatch(setPostID(0))}\n                  >\n                    Close\n                  </button>\n              ) : (\n                  <button\n                    type=\"button\"\n                    className=\"PostsList__button button\"\n                    onClick={() => dispatch(setPostID(post.id ))}\n                  >\n                    Open\n                  </button>)\n              }\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => removePost(post.id)}\n              >\n                Remove\n              </button>\n            </div>\n          </li>))\n        : (<h3> No Posts found</h3>)\n      }\n    </ul>\n  </div>\n)};\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport './NewCommentForm.scss';\n\nimport { getCommentsList, getPostId } from '../../store';\nimport { setComments } from '../../store/commentPostReducer';\n\nimport { createComment } from '../../helpers/api';\nimport { NEWCOMMENT } from '../../type';\n\nexport const NewCommentForm = () => {\n  const dispatch = useDispatch();\n  const postId = useSelector(getPostId);\n  const comments = useSelector(getCommentsList);\n  const [commentFields, setCommentFields] = useState({\n    body: '',\n    name: '',\n    email: '',\n  });\n\n  const resetForm = () => {\n    setCommentFields({\n      body: '',\n      name: '',\n      email: '',\n    });\n  };\n\n  const setForm = (event: any) => {\n    const { name, value } = event.target;\n\n    setCommentFields(prevState => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n        const newComment: NEWCOMMENT = {\n          ...commentFields, \n          postId, \n          id: Number(new Date()) \n        }\n\n        dispatch(setComments([...comments,newComment]));\n        createComment({...commentFields,postId })\n        resetForm();\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          required\n          type=\"text\"\n          name=\"name\"\n          value={commentFields.name}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={(e) => setForm(e)}\n        />\n      </div>\n      \n      <div className=\"form-field\">\n        <input\n          required\n          type=\"text\"\n          name=\"email\"\n          value={commentFields.email}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={(e) => setForm(e)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          required\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          value={commentFields.body}\n          className=\"NewCommentForm__input\"\n          onChange={(e) => setForm(e)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport './PostDetails.scss';\n\nimport { getCommentsList, getPostsDetails, reLoadpostDetails, getCommentId, getPostId } from '../../store';\nimport { setCommentID } from '../../store/commentPostReducer';\nimport { COMMENT } from '../../type';\nimport { NewCommentForm } from '../NewCommentForm';\n\nexport const PostDetails = () => {\n  const dispatch = useDispatch();\n  const comments: COMMENT[] = useSelector(getCommentsList);\n  const postDetails = useSelector(getPostsDetails);\n  const commentId = useSelector(getCommentId);\n  const postId = useSelector(getPostId);\n  const [isCommentsVisible, setIsCommentsVisible] = useState(false);\n\n  const fetchPostDetails = (commentId: number, postId: number) => {\n      return dispatch(reLoadpostDetails(commentId, postId))\n  }\n\n  useEffect(() => {\n    if (commentId !== 0) {\n        fetchPostDetails(commentId, postId)\n      };\n  }, [commentId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details: [User#{postDetails.userId}]</h2>\n\n      <section className=\"PostDetails__post\">\n        <h3>Title: {postDetails.title}</h3>\n        <p\n          className=\"PostDetails__list-item\"\n        >\n          Details: {postDetails.body}\n        </p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {comments.length > 0 && (\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => {\n              setIsCommentsVisible(current => !current);\n            }}\n            >\n            {isCommentsVisible\n              ? `Show ${comments.length} comments`\n              : `Hide ${comments.length} comments`\n            }\n            </button>\n        )}\n        {!isCommentsVisible && (\n          <ul className=\"PostDetails__list\">\n            {comments.map(comment => (\n              <li\n                key={comment.id}\n                className=\"PostDetails__list-item\"\n              >\n                <p>{comment.body}</p>\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => {\n                    dispatch(setCommentID(comment.id));\n                  }}\n                >\n                  X\n                </button>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { getErrorText } from '../../store';\n\nexport const ErrorOnLoad = () => {\n  const errorText: string = useSelector(getErrorText);\n\n  return (\n    <h3 className=\"error\">{errorText}</h3>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { Start } from './components/Start';\nimport { Filters } from './components/Filters';\nimport { PostsList } from './components/PostList';\nimport { PostDetails } from './components/PostDetails';\nimport { ErrorOnLoad } from './components/ErrorPostLoad';\n\nimport { isLoading, isErrorPost, isErrorTextPostDetails, getPostId } from './store';\n\nconst App = () => {\n  const loading = useSelector(isLoading);\n  const isLoadErrorPost = useSelector(isErrorPost);\n  const isLoadErrorPostDetails = useSelector(isErrorTextPostDetails);\n  const postId = useSelector(getPostId);\n\n  return (\n    <div className=\"App\">\n      <h2>{loading ? 'Loading...' : 'Redux list of posts:'}</h2>\n      {isLoadErrorPost && <Start />}\n      <div className=\"App\">\n        {!isLoadErrorPost && <Filters /> }\n        \n        <main className=\"App__main\">\n          <div className=\"App__sidebar\">\n            {!isLoadErrorPost\n              ? (<PostsList />)\n              : (<ErrorOnLoad />)\n            }\n          </div>\n\n          <div className=\"App__content\">\n            {isLoadErrorPostDetails === false && postId !== 0\n              ? <PostDetails />\n              : <h3>No Posts Details </h3>\n            }\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}